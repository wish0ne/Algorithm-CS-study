// function pillar_install(x, y, wall, n) {
//   wall[n - y][x] += 1;
//   wall[n - y - 1][x] += 1;
// }

// function pillar_delete(x, y, wall, n) {
//   wall[n - y][x] -= 1;
//   wall[n - y - 1][x] -= 1;
// }

// function beam_install(x, y, wall, n) {
//   wall[n - y][x] += 3;
//   wall[n - y][x + 1] += 3;
// }

// function beam_delete(x, y, wall, n) {
//   wall[n - y][x] -= 3;
//   wall[n - y][x + 1] -= 3;
// }

// function check(y, x, a, wall, n) {
//   //Î≥¥
//   if (a === 1) {
//     if (
//       wall[y][x] % 3 >= 1 ||
//       wall[y][x + 1] % 3 >= 1 ||
//       (wall[y][x] / 3 > 1 && wall[y][x + 1] / 3 > 1)
//     )
//       return true;
//   }
//   //Í∏∞Îë•
//   else {
//     if (y === n || wall[y][x] >= 1) return true;
//   }
//   return false;
// }

// function solution(n, build_frame) {
//   // (n+1) * (n+1) ÌÅ¨Í∏∞ 2Ï∞®Ïõê ÌñâÎ†¨
//   const wall = [];
//   for (let i = 0; i < n + 1; i++) {
//     wall.push(new Array(n + 1).fill(0));
//   }
//   const result = []; // ÏµúÏ¢Ö Íµ¨Ï°∞Î¨º Î∞∞Ïó¥

//   for (let frame of build_frame) {
//     const [x, y, a, b] = frame; //Í∞ÄÎ°úÏ¢åÌëú, ÏÑ∏Î°úÏ¢åÌëú, Ï¢ÖÎ•ò, ÏÑ§ÏπòÏÇ≠Ï†ú
//     //Í∏∞Îë•
//     if (a === 0) {
//       //ÏÑ§Ïπò
//       if (b === 1) {
//         //Í∏∞Îë• : Î∞îÎã•Ïóê ÏûàÍ±∞ÎÇò / Îã§Î•∏ Í∏∞Îë• ÏúÑÏóê ÏûàÍ±∞ÎÇò / Î≥¥Ïùò ÌïúÏ™Ω ÎÅùÎ∂ÄÎ∂Ñ ÏúÑÏóê ÏûàÏúºÎ©¥ ÏÑ§ÏπòÍ∞ÄÎä•
//         if (n - y === n || wall[n - y][x] >= 1) {
//           result.push([x, y, a]);
//           pillar_install(x, y, wall, n);
//         }
//       }
//       //ÏÇ≠Ï†ú
//       else {
//         pillar_delete(x, y, wall, n);
//         //ÏÇ≠Ï†úÌïú Îí§ Ï°∞Í±¥ ÎßåÏ°±ÌïòÎäîÏßÄ ÌôïÏù∏
//         let can_delete = true;
//         while (true) {
//           if (wall[n - y - 1][x] % 3 > 0 && !check(n - y - 1, x, 0, wall, n)) {
//             can_delete = false;
//             break;
//           }
//           if (wall[n - y][x] % 3 > 0 && !check(n - y + 1, x, 0, wall, n)) {
//             can_delete = false;
//             break;
//           }
//           if (
//             x > 0 &&
//             wall[n - y - 1][x - 1] / 3 > 0 &&
//             wall[n - y - 1][x] / 3 >= 1 &&
//             !check(n - y - 1, x - 1, 1, wall, n)
//           ) {
//             can_delete = false;
//             break;
//           }
//           if (
//             x < n &&
//             wall[n - y - 1][x + 1] / 3 > 0 &&
//             wall[n - y - 1][x] / 3 >= 1 &&
//             !check(n - y - 1, x, 1, wall, n)
//           ) {
//             can_delete = false;
//             break;
//           }
//           if (
//             x > 0 &&
//             wall[n - y][x - 1] / 3 > 0 &&
//             wall[n - y][x] / 3 >= 1 &&
//             !check(n - y, x - 1, 1, wall, n)
//           ) {
//             can_delete = false;
//             break;
//           }
//           if (
//             x < n &&
//             wall[n - y][x + 1] / 3 > 0 &&
//             wall[n - y][x] / 3 >= 1 &&
//             !check(n - y, x, 1, wall, n)
//           ) {
//             can_delete = false;
//             break;
//           }
//           break;
//         }

//         if (!can_delete) {
//           pillar_install(x, y, wall, n);
//         } else {
//           for (let i = 0; i < result.length; i++) {
//             if (
//               result[i][0] === x &&
//               result[i][1] === y &&
//               result[i][2] === a
//             ) {
//               result.splice(i, 1);
//               break;
//             }
//           }
//         }
//       }
//     }
//     //Î≥¥
//     else {
//       //ÏÑ§Ïπò
//       if (b === 1) {
//         //Î≥¥ : ÌïúÏ™Ω ÎÅùÎ∂ÄÎ∂ÑÏù¥ Í∏∞Îë•ÏúÑÏóê ÏûàÍ±∞ÎÇò, ÏñëÏ™Ω ÎÅùÎ∂ÄÎ∂ÑÏù¥ Îã§Î•∏ Î≥¥ÏôÄ ÎèôÏãúÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏúºÎ©¥ ÏÑ§ÏπòÍ∞ÄÎä•
//         if (
//           wall[n - y][x] % 3 >= 1 ||
//           wall[n - y][x + 1] % 3 >= 1 ||
//           (wall[n - y][x] / 3 >= 1 && wall[n - y][x + 1] / 3 >= 1)
//         ) {
//           beam_install(x, y, wall, n);
//           result.push([x, y, a]);
//         }
//       }
//       //ÏÇ≠Ï†ú
//       else {
//         beam_delete(x, y, wall, n);
//         //ÏÇ≠Ï†úÌïú Îí§ Ï°∞Í±¥ ÎßåÏ°±ÌïòÎäîÏßÄ ÌôïÏù∏
//         let can_delete = true;
//         while (true) {
//           if (wall[n - y][x] / 3 > 0 && !check(n - y, x - 1, 1, wall, n)) {
//             can_delete = false;
//             break;
//           }
//           if (wall[n - y][x + 1] / 3 > 0 && !check(n - y, x + 1, 1, wall, n)) {
//             can_delete = false;
//             break;
//           }
//           if (
//             y < n &&
//             wall[n - y - 1][x] % 3 >= 1 &&
//             wall[n - y][x] % 3 >= 1 &&
//             !check(n - y, x, 0, wall, n)
//           ) {
//             can_delete = false;
//             break;
//           }
//           if (
//             y > 0 &&
//             wall[n - y + 1][x] % 3 >= 1 &&
//             wall[n - y][x] % 3 >= 1 &&
//             !check(n - y + 1, x, 0, wall, n)
//           ) {
//             can_delete = false;
//             break;
//           }
//           if (
//             y < n &&
//             wall[n - y - 1][x + 1] % 3 >= 1 &&
//             wall[n - y][x + 1] % 3 >= 1 &&
//             !check(n - y, x + 1, 0, wall, n)
//           ) {
//             can_delete = false;
//             break;
//           }
//           if (
//             y > 0 &&
//             wall[n - y - 1][x + 1] % 3 >= 1 &&
//             wall[n - y][x + 1] % 3 >= 1 &&
//             !check(n - y + 1, x + 1, 0, wall, n)
//           ) {
//             can_delete = false;
//             break;
//           }
//           break;
//         }

//         if (!can_delete) {
//           beam_install(x, y, wall, n);
//         } else {
//           for (let i = 0; i < result.length; i++) {
//             if (
//               result[i][0] === x &&
//               result[i][1] === y &&
//               result[i][2] === a
//             ) {
//               result.splice(i, 1);
//               break;
//             }
//           }
//         }
//       }
//     }
//   }

//   result.sort((a, b) => {
//     if (a[0] === b[0]) {
//       if (a[1] === b[1]) {
//         return a[2] - b[2];
//       } else return a[1] - b[1];
//     } else return a[0] - b[0];
//   });
//   //return result;
//   for (let i = 0; i < result.length; i++) {
//     console.log(result[i]);
//   }
// }

// console.log(
//   solution(100, [
//     [2, 0, 0, 1],
//     [100, 0, 0, 1],
//     [100, 1, 1, 1],
//     [99, 1, 1, 1],
//     [99, 1, 0, 1],
//     [99, 0, 0, 1],
//   ])
// );

//not solve üòµ
//ÏùºÎ∞òÏ†ÅÏù∏ Íµ¨ÌòÑ Î¨∏Ï†úÏù∏Îç∞, ÏÑ§ÏπòÎäî Ï†ïÎßê Ïâ¨Ïö∞ÎÇò ÏÇ≠Ï†úÏóêÏÑú Í≥†Î†§Ìï¥ÏïºÌï† ÏòàÏô∏ÏÇ¨Ìï≠Ïù¥ ÎÑàÎ¨¥ ÎßéÍ∏∞ ÎïåÎ¨∏Ïóê Íµ¨ÌòÑÌïòÍ∏∞ÎèÑ Ïñ¥Î†µÍ≥†, ÏãúÍ∞ÑÎèÑ Ïò§ÎûòÍ±∏Î¶¨Í≥†, Ïã§ÏàòÎèÑ ÎßéÏù¥ Î∞úÏÉù. Îòê ÌûàÎì†ÏºÄÏù¥Ïä§ÏóêÏÑú Í≥ÑÏÜç ÌãÄÎ¶¨ÎäîÎç∞ Î∞òÎ°ÄÎ•º ÎèÑÏ†ÄÌûà Î™ªÏ∞æÍ≤†Ïùå..

//‚úî Íµ¨ÌòÑÍ≥ºÏ†ïÏù¥ Î≥µÏû°Ìïú Í≤ΩÏö∞ Ï†ïÌôïÌûà Íµ¨ÌòÑÌïòÍ∏∞Í∞Ä Ïñ¥Î†µÍ∏∞ ÎïåÎ¨∏Ïóê ‚≠êÎ¨∏Ï†úÎ•º ÏâΩÍ≤å ÌíÄÏàòÏûàÎäî ÏïÑÏù¥ÎîîÏñ¥Î•º Î®∏Î¶øÏÜçÏúºÎ°ú Ïûò Ï†ïÎ¶¨ÌïúÎí§Ïóê ÏΩîÎìúÏûëÏÑ±ÏùÑ ÏãúÏûë‚≠êÌïòÏûê.
//‚úîÏöîÍµ¨ÏÇ¨Ìï≠ÏóêÏÑú Ï†ÑÏ≤¥ Î™ÖÎ†πÏùò Í∞úÏàòÎäî 1000Í∞ú Ïù¥ÌïòÏù¥ÎØÄÎ°ú O(N^2)Ïù¥ Ïù¥ÏÉÅÏ†ÅÏù¥ÎÇò, ÏãúÍ∞ÑÏ†úÌïúÏù¥ 5Ï¥àÎ°ú Îß§Ïö∞ ÎÑâÎÑâÌïòÍ∏∞ ÎïåÎ¨∏Ïóê O(M^3)ÏúºÎ°ú ÌíÄÏñ¥ÎèÑ ÎêúÎã§ÎäîÍ≤ÉÏùÑ Î®ºÏ†Ä Ïù∏ÏßÄ
//‚úîÎî∞ÎùºÏÑú ÏÑ§Ïπò Î∞è ÏÇ≠Ï†ú Ïó∞ÏÇ∞ÏùÑ ÏàòÌñâÌï†ÎïåÎßàÎã§ 'Ï†ÑÏ≤¥ Íµ¨Ï°∞Î¨ºÏùÑ ÌôïÏù∏ÌïòÎ©∞' Í∑úÏπôÏùÑ ÌôïÏù∏ÌïòÎäî Î∞©Î≤ïÏúºÎ°ú Ìï¥Í≤∞Í∞ÄÎä• -> Ï†ÑÏàòÏ°∞ÏÇ¨
//‚úî2Ï∞®Ïõê Î∞∞Ïó¥Ïóê ÏßÅÏ†ë Íµ¨Ï°∞Î¨ºÏùÑ ÏÑ∏Ïö∞ÎäîÍ≤å ÏïÑÎãàÎùº Í∑∏ÎÉ• Íµ¨Ï°∞Î¨ºÎì§Ïùò Ï¢åÌëúÎ•º Ï†ÄÏû•Ìï¥Ïïº Îçî ÏâΩÍ≤å Íµ¨ÌòÑÍ∞ÄÎä•. -> Ïù¥Î∞©Î≤ïÏù¥Î©¥ Ï†ÑÏàòÏ°∞ÏÇ¨ ÎßêÍ≥†ÎèÑ Í∞ÄÎä•ÌñàÏùÑÎìØ?

//ÌòÑÏû¨ ÏÑ§ÏπòÎêú Î™®Îì† Íµ¨Ï°∞Î¨ºÏù¥ Í∞ÄÎä•ÌïúÏßÄ ÌôïÏù∏
function possible(answers) {
  for (let answer of answers) {
    const [x, y, stuff] = answer;
    //Í∏∞Îë•
    if (stuff === 0) {
      //Î∞îÎã• ÏúÑÍ±∞ÎÇò Î≥¥Ïùò ÌïúÏ™Ω ÎÅùÎ∂ÄÎ∂Ñ ÏúÑÍ±∞ÎÇò Îã§Î•∏ Í∏∞Îë• ÏúÑÎùºÎ©¥ Ï†ïÏÉÅ
      if (
        y === 0 ||
        answers.find(
          (ele) => ele[0] === x - 1 && ele[1] === y && ele[2] === 1
        ) !== undefined ||
        answers.find((ele) => ele[0] === x && ele[1] === y && ele[2] === 1) !==
          undefined ||
        answers.find(
          (ele) => ele[0] === x && ele[1] === y - 1 && ele[2] === 0
        ) !== undefined
      )
        continue;
      return false; //ÏïÑÎãàÎùºÎ©¥ falseÎ∞òÌôò
    } else if (stuff === 1) {
      //ÌïúÏ™Ω ÎÅùÎ∂ÄÎ∂ÑÏù¥ Í∏∞Îë• ÏúÑ ÌòπÏùÄ ÏñëÏ™Ω ÎÅùÎ∂ÄÎ∂ÑÏù¥ Îã§Î•∏ Î≥¥ÏôÄ ÎèôÏãúÏóê Ïó∞Í≤∞Ïù¥ÎùºÎ©¥ Ï†ïÏÉÅ
      if (
        answers.find(
          (ele) => ele[0] === x && ele[1] === y - 1 && ele[2] === 0
        ) !== undefined ||
        answers.find(
          (ele) => ele[0] === x + 1 && ele[1] === y - 1 && ele[2] === 0
        ) !== undefined ||
        (answers.find(
          (ele) => ele[0] === x - 1 && ele[1] === y && ele[2] === 1
        ) !== undefined &&
          answers.find(
            (ele) => ele[0] === x + 1 && ele[1] === y && ele[2] === 1
          ) !== undefined)
      )
        continue;
      return false;
    }
  }
  return true;
}

function solution(n, build_frame) {
  let answers = [];
  for (let frame of build_frame) {
    const [x, y, stuff, operate] = frame;
    //ÏÇ≠Ï†ú
    if (operate === 0) {
      //ÏùºÎã® ÏÇ≠Ï†ú ÏàòÌñâ
      for (let i = 0; i < answers.length; i++) {
        if (
          answers[i][0] === x &&
          answers[i][1] === y &&
          answers[i][2] === stuff
        ) {
          answers.splice(i, 1);
          break;
        }
      }
      //Í∞ÄÎä•Ìïú Íµ¨Ï°∞Î¨ºÏù∏ÏßÄ ÌôïÏù∏
      if (!possible(answers)) {
        answers.push([x, y, stuff]);
      }
    }
    //ÏÑ§Ïπò
    else if (operate === 1) {
      //ÏùºÎã® ÏÑ§Ïπò
      answers.push([x, y, stuff]);
      if (!possible(answers)) {
        answers.splice(answers.length - 1, 1);
      }
    }
  }

  answers.sort((a, b) => {
    if (a[0] === b[0]) {
      if (a[1] === b[1]) {
        return a[2] - b[2];
      } else return a[1] - b[1];
    } else return a[0] - b[0];
  });

  return answers;
}

solution(5, [
  [0, 0, 0, 1],
  [2, 0, 0, 1],
  [4, 0, 0, 1],
  [0, 1, 1, 1],
  [1, 1, 1, 1],
  [2, 1, 1, 1],
  [3, 1, 1, 1],
  [2, 0, 0, 0],
  [1, 1, 1, 0],
  [2, 2, 0, 1],
]);
